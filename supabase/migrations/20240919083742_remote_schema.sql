

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;


CREATE EXTENSION IF NOT EXISTS "pgsodium" WITH SCHEMA "pgsodium";






COMMENT ON SCHEMA "public" IS 'standard public schema';



CREATE EXTENSION IF NOT EXISTS "pg_graphql" WITH SCHEMA "graphql";






CREATE EXTENSION IF NOT EXISTS "pg_stat_statements" WITH SCHEMA "extensions";






CREATE EXTENSION IF NOT EXISTS "pgcrypto" WITH SCHEMA "extensions";






CREATE EXTENSION IF NOT EXISTS "pgjwt" WITH SCHEMA "extensions";






CREATE EXTENSION IF NOT EXISTS "supabase_vault" WITH SCHEMA "vault";






CREATE EXTENSION IF NOT EXISTS "uuid-ossp" WITH SCHEMA "extensions";





SET default_tablespace = '';

SET default_table_access_method = "heap";


CREATE TABLE IF NOT EXISTS "public"."Danksagungen" (
    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "vorname" "text",
    "nachname" "text",
    "writtenText" "text",
    "userId" "uuid",
    "profileImage" "text",
    "location" "text",
    "authorId" "uuid"
);


ALTER TABLE "public"."Danksagungen" OWNER TO "postgres";


COMMENT ON TABLE "public"."Danksagungen" IS 'Danksagungen';



CREATE TABLE IF NOT EXISTS "public"."Posts" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "location" "text",
    "nachname" "text",
    "option" "text",
    "postId" "text",
    "postText" "text",
    "profileImage" "text",
    "userId" "uuid" NOT NULL,
    "vorname" "text",
    "category" "text",
    "longitude" numeric,
    "latitude" numeric,
    CONSTRAINT "Posts_pkey" PRIMARY KEY ("id"),
    CONSTRAINT "Posts_userId_fkey" FOREIGN KEY ("userId") REFERENCES "public"."users"("id") ON DELETE CASCADE
);


ALTER TABLE "public"."Posts" OWNER TO "postgres";


COMMENT ON TABLE "public"."Posts" IS 'Posts';



COMMENT ON COLUMN "public"."Posts"."category" IS 'Post category';



COMMENT ON COLUMN "public"."Posts"."longitude" IS 'Longitude of post';



ALTER TABLE "public"."Posts" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."Posts_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."users" (
    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "location" "text",
    "vorname" "text",
    "nachname" "text",
    "email" "text",
    "profileImage" "text",
    "longitude" numeric,
    "latitude" numeric,
    "kategorien" text[] DEFAULT '{}',
    CONSTRAINT "users_pkey" PRIMARY KEY ("id")
);


ALTER TABLE "public"."users" OWNER TO "postgres";


COMMENT ON TABLE "public"."users" IS 'authenticated users';



CREATE TABLE IF NOT EXISTS "public"."user_requests" (
    "id" integer NOT NULL,
    "user_id" "uuid" NOT NULL,
    "request_time" timestamp with time zone DEFAULT "now"() NOT NULL
);


ALTER TABLE "public"."user_requests" OWNER TO "postgres";


CREATE SEQUENCE IF NOT EXISTS "public"."user_requests_id_seq"
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE "public"."user_requests_id_seq" OWNER TO "postgres";


ALTER SEQUENCE "public"."user_requests_id_seq" OWNED BY "public"."user_requests"."id";



ALTER TABLE ONLY "public"."user_requests" ALTER COLUMN "id" SET DEFAULT "nextval"('"public"."user_requests_id_seq"'::"regclass");



ALTER TABLE ONLY "public"."Danksagungen"
    ADD CONSTRAINT "Danksagungen_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."Posts"
    ADD CONSTRAINT "Posts_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."users"
    ADD CONSTRAINT "users_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."user_requests"
    ADD CONSTRAINT "user_requests_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."user_requests"
    ADD CONSTRAINT "fk_user" FOREIGN KEY ("user_id") REFERENCES "auth"."users"("id");



ALTER TABLE "public"."Danksagungen" ENABLE ROW LEVEL SECURITY;


CREATE POLICY "DeleteDanksagung" ON "public"."Danksagungen" FOR DELETE USING (("auth"."uid"() = "userId"));



CREATE POLICY "DeleteOwnPost" ON "public"."Danksagungen" FOR DELETE USING (("auth"."uid"() = "authorId"));



CREATE POLICY "DeleteOwnPost" ON "public"."Posts" FOR DELETE USING (("auth"."uid"() = "userId"));



CREATE POLICY "Enable insert for authenticated users only" ON "public"."Danksagungen" FOR INSERT TO "authenticated" WITH CHECK (true);



CREATE POLICY "Enable insert for authenticated users only" ON "public"."users" FOR INSERT TO "authenticated" WITH CHECK (true);



CREATE POLICY "Enable read access for all users" ON "public"."Danksagungen" FOR SELECT TO "authenticated" USING (true);



CREATE POLICY "Enable read access for all users" ON "public"."users" FOR SELECT TO "authenticated" USING (true);



ALTER TABLE "public"."Posts" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."users" ENABLE ROW LEVEL SECURITY;


CREATE POLICY "UserCanFetch" ON "public"."Posts" FOR SELECT TO "authenticated" USING (true);



CREATE POLICY "UserCanPost" ON "public"."Posts" FOR INSERT TO "authenticated" WITH CHECK (true);



ALTER TABLE "public"."user_requests" ENABLE ROW LEVEL SECURITY;




ALTER PUBLICATION "supabase_realtime" OWNER TO "postgres";


ALTER PUBLICATION "supabase_realtime" ADD TABLE ONLY "public"."Danksagungen";



ALTER PUBLICATION "supabase_realtime" ADD TABLE ONLY "public"."Posts";



GRANT USAGE ON SCHEMA "public" TO "postgres";
GRANT USAGE ON SCHEMA "public" TO "anon";
GRANT USAGE ON SCHEMA "public" TO "authenticated";
GRANT USAGE ON SCHEMA "public" TO "service_role";



































































































































































































GRANT ALL ON TABLE "public"."Danksagungen" TO "anon";
GRANT ALL ON TABLE "public"."Danksagungen" TO "authenticated";
GRANT ALL ON TABLE "public"."Danksagungen" TO "service_role";



GRANT ALL ON TABLE "public"."Posts" TO "anon";
GRANT ALL ON TABLE "public"."Posts" TO "authenticated";
GRANT ALL ON TABLE "public"."Posts" TO "service_role";



GRANT ALL ON SEQUENCE "public"."Posts_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."Posts_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."Posts_id_seq" TO "service_role";



GRANT ALL ON TABLE "public"."users" TO "anon";
GRANT ALL ON TABLE "public"."users" TO "authenticated";
GRANT ALL ON TABLE "public"."users" TO "service_role";



GRANT ALL ON TABLE "public"."user_requests" TO "anon";
GRANT ALL ON TABLE "public"."user_requests" TO "authenticated";
GRANT ALL ON TABLE "public"."user_requests" TO "service_role";



GRANT ALL ON SEQUENCE "public"."user_requests_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."user_requests_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."user_requests_id_seq" TO "service_role";



ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "service_role";






ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "service_role";






ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "service_role";






























RESET ALL;

-- Function to get next post ID
CREATE OR REPLACE FUNCTION public.get_next_post_id()
RETURNS bigint
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
DECLARE
    next_id bigint;
BEGIN
    SELECT nextval('public.Posts_id_seq') INTO next_id;
    RETURN next_id;
END;
$$;

-- Grant execute permission to authenticated users
GRANT EXECUTE ON FUNCTION public.get_next_post_id() TO authenticated;
